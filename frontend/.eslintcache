[{"/Users/Jacqueline/Documents/grocery_inventory_management/frontend/src/index.js":"1","/Users/Jacqueline/Documents/grocery_inventory_management/frontend/src/App.js":"2","/Users/Jacqueline/Documents/grocery_inventory_management/frontend/src/reportWebVitals.js":"3","/Users/Jacqueline/Documents/grocery_inventory_management/frontend/src/Utils/useOutsideClick.js":"4","/Users/Jacqueline/Documents/grocery_inventory_management/frontend/src/Components/Gorcery-Viewer/grocery_viewer.js":"5","/Users/Jacqueline/Documents/grocery_inventory_management/frontend/src/Components/Login/login.js":"6","/Users/Jacqueline/Documents/grocery_inventory_management/frontend/src/Components/Employee-Viewer/employee_viewer.js":"7","/Users/Jacqueline/Documents/grocery_inventory_management/frontend/src/Components/Grocery-Item/grocery_item.js":"8","/Users/Jacqueline/Documents/grocery_inventory_management/frontend/src/Components/Editable-Item/editable-item.js":"9"},{"size":549,"mtime":1610213408971,"results":"10","hashOfConfig":"11"},{"size":2137,"mtime":1610382659403,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1609964403355,"results":"13","hashOfConfig":"11"},{"size":494,"mtime":1610296386256,"results":"14","hashOfConfig":"11"},{"size":4602,"mtime":1610305251119,"results":"15","hashOfConfig":"11"},{"size":1273,"mtime":1610382668779,"results":"16","hashOfConfig":"11"},{"size":2720,"mtime":1610382532954,"results":"17","hashOfConfig":"11"},{"size":2235,"mtime":1610382558571,"results":"18","hashOfConfig":"11"},{"size":3647,"mtime":1610382482982,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1na7d4s",{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/Jacqueline/Documents/grocery_inventory_management/frontend/src/index.js",[],["43","44"],"/Users/Jacqueline/Documents/grocery_inventory_management/frontend/src/App.js",["45","46","47"],"\nimport './App.css';\nimport Grocery_Viewer from './Components/Gorcery-Viewer/grocery_viewer'\nimport Login from './Components/Login/login'\nimport Employee_Viewer from './Components/Employee-Viewer/employee_viewer'\nimport React, {useState } from \"react\";\nimport axios from 'axios';\nimport { Navbar} from 'react-bootstrap';\nimport trolly from './Images/trolly.png'\n\nfunction App() {\n\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [showError, setShowError] = useState(false);\n  const [employeeView, setEmployeeView] = useState(false)\n  const [errorMsg, setErrorMsg] = useState(\"\")\n\n  //checks user credentials with database\n  const userLogin = (email, pw) => {\n    const query_string = \"?email=\" + email + \"&pw=\" + pw;\n    axios.get(\"http://127.0.0.1:8000/api/employees/auth\" + query_string)\n        .then(response => {if (response.status = 200) {\n          setLoggedIn(true);\n          setShowError(false);\n      }})\n      .catch(error => {\n        if (!error.response) {\n          setErrorMsg('Error: Network Error');\n          setShowError(true)\n        } else {\n            setErrorMsg(\"Invalid username or password\");\n            setShowError(true)\n      }})\n  }\n\n\n  return (\n    <div className=\"App\">\n      {\n      loggedIn &&\n      <Navbar className=\"nav\">\n        <img className=\"logo\" src={trolly} alt=\"logo\"></img>\n      <Navbar.Brand>Inventory Manager</Navbar.Brand>\n      <div className='button-container'>\n      <button className=\"nav-button logout\" onClick={() => {setLoggedIn(false); setEmployeeView(false)}} >Logout</button> \n      <button className=\"nav-button view-button\" onClick={() => setEmployeeView(true)}>Add Employee</button>\n      <button className=\"nav-button view-button\" onClick={() => setEmployeeView(false)}>View Inventory</button>\n      </div>\n      </Navbar>\n      }{\n      !loggedIn && \n      <Login userLogin={userLogin} showError={showError} errorMsg={errorMsg}> </Login>\n      }{\n      loggedIn && employeeView &&\n      <Employee_Viewer ></Employee_Viewer>\n      }{\n        loggedIn && !employeeView &&\n      <Grocery_Viewer></Grocery_Viewer>\n      }\n    </div>\n\n  )\n}\n\nexport default App;\n\n","/Users/Jacqueline/Documents/grocery_inventory_management/frontend/src/reportWebVitals.js",[],"/Users/Jacqueline/Documents/grocery_inventory_management/frontend/src/Utils/useOutsideClick.js",[],["48","49"],"/Users/Jacqueline/Documents/grocery_inventory_management/frontend/src/Components/Gorcery-Viewer/grocery_viewer.js",["50","51"],"import React, { useState, useEffect }  from \"react\";\nimport Grocery_Item from '../Grocery-Item/grocery_item';\nimport { Row, Col,Table, Button} from 'react-bootstrap';\nimport './grocery_viewer.css';\nimport axios from \"axios\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusSquare } from '@fortawesome/free-solid-svg-icons';\n\n\nfunction Grocery_Viewer() {\n    \n    const [itemList, setItemList] = useState([]);\n    const [addNew, setAddNew] = useState(false)\n    const [error, setError] = useState(\"\")\n\n    //pulls latest data from DB and refreshes itemlist\n    const refreshList = () => {\n        axios.get(\"http://127.0.0.1:8000/api/grocery_items/\")\n             .then(response => {setItemList(response.data);})\n             .catch(err => setError(\"Unable to access inventory data. \" + err))\n      };\n\n    //adds new item to DB and resets view\n    const addItem = itemData => {\n                                axios.post(\"http://127.0.0.1:8000/api/grocery_items/\", itemData)\n                                    .then(response => {\n                                        if (response.status === 201)\n                                            {setAddNew(false);\n                                            refreshList();\n                                            setError(\"\");\n                                        } else {\n                                            setError(\"Something unexpected happened. Error code: \" + response.status + response.statusText);\n                                            refreshList();\n                                        }})\n                                    .catch(err => {\n                                        setError(\"Unable to add item. \" + err);\n                                        refreshList();})\n                                    }\n\n\n    //gets item data from DB on first load\n    useEffect(() => refreshList(), [])\n\n    //deletes item from inventory\n    const deleteItem = (id) => {\n        axios.delete(`http://localhost:8000/api/grocery_items/${id}`)\n            .then(response => {\n                if (response.status === 204){\n                    refreshList();\n                    setError(\"\");\n                } else {\n                    setError(\"Something unexpected happened. Error code: \" + response.status + response.statusText);\n                    refreshList();\n                }})\n                .catch(err => {\n                    setError(\"Unable to delete item. \" + err);\n                    refreshList();})\n    }\n\n    //updates item in inventory\n    const updateItem = (item) => {\n        axios.put(`http://localhost:8000/api/grocery_items/${item.id}/`, item)\n             .then(response => { if\n                (response.status === 200) {\n                    refreshList();  \n                    setError(\"\");   \n            } else {\n                setError(\"Something unexpected happened. Error code: \" + response.status + response.statusText);\n                refreshList();\n            }})\n            .catch(err => {\n                setError(\"Unable to update item. \" + err);\n                refreshList();})\n    }\n\n \n    return ( \n        <div>\n            <Row className=\"grocery-header \">\n                <Col className=\"error\">{error}</Col>\n                <Col><Button className=\"addButton float-right\" onClick={() => setAddNew(true)}> Add Item <FontAwesomeIcon className=\"plus\" icon={faPlusSquare} /></Button></Col>\n            </Row>\n            <Table bordered hover size=\"sm\" className='item-viewer' >\n                <thead className='headings'>\n                    <tr>\n                    <th></th>\n                    <th> ID </th>\n                    <th> Name </th>\n                    <th> Quantity </th>\n                    <th> Location </th>\n                    <th> Taxable </th>\n                    <th> Status </th>\n                    <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                {addNew && \n                <Grocery_Item name=\"\" quantity=\"0\" location=\"Pantry\" taxable=\"false\" status=\"Full\" addItem={addItem}></Grocery_Item>\n                }    \n                {itemList.map(item => {\n                    return <Grocery_Item name={item.name} quantity={item.quantity} location={item.location} taxable={item.taxable} status={item.status} id={item.id} key={item.id} deleteItem={deleteItem} updateItem={updateItem} refreshList={refreshList}></Grocery_Item>\n                })}\n                </tbody>\n            </Table>\n        </div>\n        \n        \n    )\n}\n\nexport default Grocery_Viewer","/Users/Jacqueline/Documents/grocery_inventory_management/frontend/src/Components/Login/login.js",[],"/Users/Jacqueline/Documents/grocery_inventory_management/frontend/src/Components/Employee-Viewer/employee_viewer.js",[],"/Users/Jacqueline/Documents/grocery_inventory_management/frontend/src/Components/Grocery-Item/grocery_item.js",["52"],"import React, { useState }  from \"react\";\nimport './grocery_item.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit, faTrashAlt, faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\nimport Editable_Item from '../Editable-Item/editable-item'\n\nfunction Grocery_Item(props) {\n\n    const [editView, setEditView] = useState(false);\n\n    //deletes item from database\n    const handleDelete = () => {\n        props.deleteItem(props.id);\n    };\n\n    //sets the editView to turn on or off editable \n    const changeView = (bool) => {\n        setEditView(bool)\n    }\n\n\n    return (\n            <>\n                {editView || props.addItem ? \n            <Editable_Item name={props.name} quantity={props.quantity} location={props.location} taxable={props.taxable} status={props.status} id={props.id} key={props.id} deleteItem={handleDelete} updateItem={props.updateItem} refreshList={props.refreshList} editView={changeView} addItem={props.addItem}>\n           </Editable_Item>\n           :\n            <tr>\n                <td>\n                    <button className=\"icon clickable\" ><FontAwesomeIcon icon={faEdit} onClick={() => setEditView(true)}/></button>\n                </td>\n                <td className='id-container '>\n                    {props.id}\n                </td>\n                <td className='name-container '>\n                    {props.name}\n                </td>\n                <td className='quantity-container '>\n                    {props.quantity}\n                </td>\n                <td className='location-container' >\n                {props.location}\n                </td>\n                <td className='taxable-container '>\n                <div className=\"icon\">{props.taxable ? <FontAwesomeIcon icon={faCheckSquare} /> : <FontAwesomeIcon icon={faSquare}/>}</div>\n                </td>\n                <td className='status-container '>\n                    {props.status} \n                </td>\n                <td>\n                    <button className=\"icon clickable\" onClick={handleDelete}><FontAwesomeIcon icon={faTrashAlt} /></button>\n                </td>\n            </tr> \n            }\n            </>\n         \n    )\n}\n\nexport default Grocery_Item","/Users/Jacqueline/Documents/grocery_inventory_management/frontend/src/Components/Editable-Item/editable-item.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":22,"column":32,"nodeType":"59","messageId":"60","endLine":22,"endColumn":53},{"ruleId":"61","severity":1,"message":"62","line":55,"column":7,"nodeType":"63","endLine":55,"endColumn":25},{"ruleId":"61","severity":1,"message":"64","line":58,"column":7,"nodeType":"63","endLine":58,"endColumn":23},{"ruleId":"53","replacedBy":"65"},{"ruleId":"55","replacedBy":"66"},{"ruleId":"61","severity":1,"message":"67","line":98,"column":17,"nodeType":"63","endLine":98,"endColumn":118},{"ruleId":"61","severity":1,"message":"67","line":101,"column":28,"nodeType":"63","endLine":101,"endColumn":254},{"ruleId":"61","severity":1,"message":"68","line":25,"column":13,"nodeType":"63","endLine":25,"endColumn":307},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","react/jsx-pascal-case","Imported JSX component Employee_Viewer must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component Grocery_Viewer must be in PascalCase or SCREAMING_SNAKE_CASE",["69"],["70"],"Imported JSX component Grocery_Item must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Editable_Item must be in PascalCase or SCREAMING_SNAKE_CASE","no-global-assign","no-unsafe-negation"]